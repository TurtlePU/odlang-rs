println : String -IO> () = _

main : () -IO> () = {
    println "Hello world!"
}
-- can also be written as `{ IO ~> () }` or `{ IO }`

addTwo : Int -> Int =
    x -> x + 2

data List a e ' = Nil | Cons a { e ~'> List a e }

sum : List Int ~> Int =
    Nil -> 0
    Cons x xs -> x + sum xs()

imperative : Int -IO> () =
    0 -> println "Zero, nothing to do here"
    x ->
        let y: File = open "input.txt"
        let y' = write y `{x}`
        close y'

data Maybe a = Just a | Nothing

effect Ask =
    ask : () -!> Int

with_state : s -> HandlerS s t e f -> { e + f ~> t } -f> (s, t) = ...

second (x, y) = y

x |> f = f x

ask_example (x: Int) (y: Int) = with_state [x, y] (
    (Cons x xs, ask (), cont) -> (xs(), cont(x))
    (Nil, _, _) -> panic()
) asks |> second

asks = { ask() + ask() }

if : Bool -> { ~> a } & { ~> a } ~> a =
    true -> (f &) -> f()
    false -> (& f) -> f()
